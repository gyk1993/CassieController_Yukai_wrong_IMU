

syms qw qx qy qz real
syms dqw dqx dqy dqz real

q = [qw;qx;qy;qz];
dq = [dqw;dqx;dqy;dqz];

qr = qw;
qi = qx;
qj = qy;
qk = qz;

a = qw;
b = qx;
c = qy;
d = qz;




R_sym = sym('r',[3,3]);
dR_sym = sym('dr',[3,3]);

R_sym_v = reshape(R_sym,[],1);
dR_sym_v = reshape(dR_sym,[],1);


roll = atan2(-R_sym(2,3),R_sym(3,3));
pitch = asin(R_sym(1,3));
yaw = atan2(-R_sym(1,2),R_sym(1,1));

droll = jacobian(roll,R_sym_v)*dR_sym_v;
dpitch = jacobian(pitch,R_sym_v)*dR_sym_v;
dyaw = jacobian(yaw,R_sym_v)*dR_sym_v;

% Quaternion to Matrix
R = [ a^2+b^2-c^2-d^2,      2*b*c-2*a*d,            2*b*d+2*a*c;
    2*b*c+2*a*d,            a^2-b^2+c^2-d^2,        2*c*d-2*a*b;
    2*b*d-2*a*c,            2*c*d+2*a*b,            a^2-b^2-c^2+d^2];

% Matrix and angular velocity ot dMatrix, angular velocity is chosen as
% I_w_IC (ATTENTION!!!!!!)]

dR = w_m*R_sym;

matlabFunction(R, 'File', [PATH 'Quaternion_to_Matrix'], 'Vars', {q});
matlabFunction(dR, 'File', [PATH 'AngularVelocity_to_dMatrix'], 'Vars', {w,R_sym});
matlabFunction(roll,pitch,yaw,'File', [PATH 'Matrix_to_Euler'], 'Vars', {R_sym});
matlabFunction(droll,dpitch,dyaw,'File', [PATH 'dMatrix_to_dEuler'], 'Vars', {R_sym,dR_sym});






% roll = atan2(-2*(qy*qz-qw*qx), qw^2 - qx^2 -qy^2 +qz^2);
% pitch = asin(2*(qw*qy+qx*qz));
% yaw = atan2(-2*(qx*qy-qw*qz), qw^2 -qx^2 - qy^2 +qz^2);





% droll = jacobian(roll,q)*dq;
% dpitch = jacobian(pitch,q)*dq;
% dyaw = jacobian(yaw,q)*dq;
% 
% droll = simplify(droll)
% dpitch = simplify(dpitch)
% dyaw = simplify(dyaw)